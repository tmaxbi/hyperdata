# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: scm
  labels:
    app.kubernetes.io/component: ozone
spec:
  selector:
    matchLabels:
      app: ozone
      component: scm
  serviceName: scm
  replicas: {{ .Values.scm.replicas }}
  template:
    metadata:
      labels:
        app: ozone
        component: scm
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9876"
        prometheus.io/path: /prom
    spec:
      securityContext:
        fsGroup: 1000
      initContainers:
      - name: init
        image: {{ .Values.image }}
        imagePullPolicy: IfNotPresent
        args:
        - ozone
        - scm
        - --init
        envFrom:
        - configMapRef:
            name: config
        volumeMounts:
        - name: data
          mountPath: /data
      containers:
      - name: scm
        image: {{ .Values.image }}
        imagePullPolicy: IfNotPresent
        args:
        - ozone
        - scm
        livenessProbe:
          tcpSocket:
            port: 9861
          initialDelaySeconds: 30
        env:
        - name: TZ
          value: Asia/Seoul
        envFrom:
        - configMapRef:
            name: config
        volumeMounts:
        - name: data
          mountPath: /data
        resources:
          limits:
            cpu: {{ .Values.scm.resources.limits.cpu }}
            memory: {{ .Values.scm.resources.limits.memory }}
          requests:
            cpu: {{ .Values.scm.resources.requests.cpu }}
            memory: {{ .Values.scm.resources.requests.memory }}
#      nodeSelector:
#        kubernetes.io/hostname: kubemaster
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.scm.storage.size }}
